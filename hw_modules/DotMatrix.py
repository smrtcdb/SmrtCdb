import uasyncio

HT1635B_I2C_ADDRESS = 0x68
HT1632B_CMD_RAM_W = 0b10000000
HT1635B_CMD_BLINK = 0b10000100
HT1635B_CMD_COM = 0b10001000
HT1635B_CMD_OSC = 0b10100000
HT1635B_CMD_SYSTEM_MODE = 0b10000010
HT1635B_CMD_BRIGHTNESS = 0b11000000


class DotMatrix:
    POWER_ON = [
        [0x00, 0x00, 0x00, 0xF8, 0xF8, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0xF8, 0x00, 0x00, 0xF8, 0x00, 0x00],
        [0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00],
        [0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8],

        [0x00, 0x00, 0x00, 0xF8, 0xF8, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0xF8, 0x00, 0x00, 0xF8, 0x00, 0x00],
        [0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00],
        [0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8],
        # [0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x10, 0x10]
    ]
    SPEEDS = [
        [0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x10, 0x10],
        [0x70, 0x88, 0x08, 0x10, 0x20, 0x40, 0x80, 0xF8],
        [0x70, 0x88, 0x08, 0x30, 0x08, 0x08, 0x88, 0x70],
        [0x88, 0x88, 0x88, 0xF8, 0x08, 0x08, 0x08, 0x08],
        [0xF8, 0x80, 0x80, 0xF0, 0x08, 0x08, 0x08, 0xF0]
    ]
    SPEED_TRANSITIONS = [
        [
            [0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x10, 0x10],
            [0x00, 0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x10],
            [0xF8, 0x00, 0x10, 0x30, 0x50, 0x10, 0x10, 0x10],
            [0x80, 0xF8, 0x00, 0x10, 0x30, 0x50, 0x10, 0x10],
            [0x40, 0x80, 0xF8, 0x00, 0x10, 0x30, 0x50, 0x10],
            [0x20, 0x40, 0x80, 0xF8, 0x00, 0x10, 0x30, 0x50],
            [0x10, 0x20, 0x40, 0x80, 0xF8, 0x00, 0x10, 0x30],
            [0x08, 0x10, 0x20, 0x40, 0x80, 0xF8, 0x00, 0x10],
            [0x08, 0x08, 0x10, 0x20, 0x40, 0x80, 0xF8, 0x00],
            [0x70, 0x88, 0x08, 0x10, 0x20, 0x40, 0x80, 0xF8]
        ],  # sp1 - sp2
        [
            [0x70, 0x88, 0x08, 0x10, 0x20, 0x40, 0x80, 0xF8],
            [0x00, 0x70, 0x88, 0x08, 0x10, 0x20, 0x40, 0x80],
            [0x00, 0x00, 0x70, 0x88, 0x08, 0x10, 0x20, 0x40],
            [0x88, 0x70, 0x00, 0x70, 0x88, 0x08, 0x10, 0x20],
            [0x08, 0x88, 0x70, 0x00, 0x70, 0x88, 0x08, 0x10],
            [0x08, 0x08, 0x88, 0x70, 0x00, 0x70, 0x88, 0x08],
            [0x30, 0x08, 0x08, 0x88, 0x70, 0x00, 0x70, 0x88],
            [0x08, 0x30, 0x08, 0x08, 0x88, 0x70, 0x00, 0x70],
            [0x88, 0x08, 0x30, 0x08, 0x08, 0x88, 0x70, 0x00],
            [0x70, 0x88, 0x08, 0x30, 0x08, 0x08, 0x88, 0x70]
        ],  # sp2- sp3

        [
            [0x70, 0x88, 0x08, 0x30, 0x08, 0x08, 0x88, 0x70],
            [0x00, 0x70, 0x88, 0x08, 0x30, 0x08, 0x08, 0x88],
            [0x08, 0x00, 0x70, 0x88, 0x08, 0x30, 0x08, 0x08],
            [0x08, 0x08, 0x00, 0x70, 0x88, 0x08, 0x30, 0x08],
            [0x08, 0x08, 0x08, 0x00, 0x70, 0x88, 0x08, 0x30],
            [0x08, 0x08, 0x08, 0x08, 0x00, 0x70, 0x88, 0x08],
            [0xF8, 0x08, 0x08, 0x08, 0x08, 0x00, 0x70, 0x88],
            [0x88, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x00, 0x70],
            [0x88, 0x88, 0xF8, 0x08, 0x08, 0x08, 0x08, 0x00],
            [0x88, 0x88, 0x88, 0xF8, 0x08, 0x08, 0x08, 0x08]
        ],  # sp3- sp4
        [
            [0x88, 0x88, 0x88, 0xF8, 0x08, 0x08, 0x08, 0x08],
            [0x00, 0x88, 0x88, 0x88, 0xF8, 0x08, 0x08, 0x08],
            [0xF0, 0x00, 0x88, 0x88, 0x88, 0xF8, 0x08, 0x08],
            [0x08, 0xF0, 0x00, 0x88, 0x88, 0x88, 0xF8, 0x08],
            [0x08, 0x08, 0xF0, 0x00, 0x88, 0x88, 0x88, 0xF8],
            [0x08, 0x08, 0x08, 0xF0, 0x00, 0x88, 0x88, 0x88],
            [0xF0, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x88, 0x88],
            [0x80, 0xF0, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x88],
            [0x80, 0x80, 0xF0, 0x08, 0x08, 0x08, 0xF0, 0x00],
            [0xF8, 0x80, 0x80, 0xF0, 0x08, 0x08, 0x08, 0xF0]
        ],  # sp4- sp5
        [
            [0xF8, 0x80, 0x80, 0xF8, 0x08, 0x08, 0x08, 0xF0],
            [0x00, 0xF8, 0x80, 0x80, 0xF8, 0x08, 0x08, 0x08],
            [0x10, 0x00, 0xF8, 0x80, 0x80, 0xF8, 0x08, 0x08],
            [0x10, 0x10, 0x00, 0xF8, 0x80, 0x80, 0xF8, 0x08],
            [0x10, 0x10, 0x10, 0x00, 0xF8, 0x80, 0x80, 0xF8],
            [0x10, 0x10, 0x10, 0x10, 0x00, 0xF8, 0x80, 0x80],
            [0x50, 0x10, 0x10, 0x10, 0x10, 0x00, 0xF8, 0x80],
            [0x30, 0x50, 0x10, 0x10, 0x10, 0x10, 0x00, 0xF8],
            [0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x10, 0x10],
            [0x10, 0x30, 0x50, 0x10, 0x10, 0x10, 0x10, 0x10],
        ]  # sp5- sp1
    ]
    TIMERS = [
        [0x00, 0x00, 0x00, 0x70, 0x50, 0x50, 0x50, 0x70],  # TIMER 0
        [0x20, 0x00, 0x00, 0x20, 0x60, 0x20, 0x20, 0x20],
        [0x50, 0x00, 0x00, 0x70, 0x10, 0x70, 0x40, 0x70],
        [0xD8, 0x00, 0x00, 0x50, 0x50, 0x70, 0x10, 0x10],
        [0xD8, 0xD8, 0x00, 0x70, 0x50, 0x70, 0x50, 0x70],
        [0xF8, 0x80, 0x80, 0xF0, 0x08, 0x08, 0x08, 0xF0],  # Timer
    ]
    SWINGS = [
        ([
             [0, 0, 0, 248, 248, 0, 0, 0], [16, 32, 64, 128, 128, 64, 32, 16], [128, 128, 128, 128, 128, 128, 128, 128],
             [16, 32, 64, 128, 128, 64, 32, 16], [0, 0, 0, 240, 240, 0, 0, 0], [0, 32, 64, 128, 128, 64, 32, 0],
             [0, 128, 128, 128, 128, 128, 128, 0], [0, 0, 64, 128, 128, 64, 0, 0], [0, 0, 0, 192, 192, 0, 0, 0],
             [0, 0, 0, 128, 128, 0, 0, 0]

            # [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80],
            # [0x10, 0x20, 0x40, 0x80, 0x80, 0x40, 0x20, 0x10],
            # [0x00, 0x00, 0x00, 0xF8, 0xF8, 0x00, 0x00, 0x00],
            #             [0xF8, 0x80, 0x80, 0xF0, 0x08, 0x08, 0x08, 0xF0],  # Swing OFF
        ], 400),
        ([
            [0x00, 0x00, 0x00, 0xF8, 0xF8, 0x00, 0x00, 0x00],
            [0x10, 0x20, 0x40, 0x80, 0x40, 0x20, 0x10, 0x00],
            [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80],
            [0x10, 0x20, 0x40, 0x80, 0x80, 0x40, 0x20, 0x10],
            [0x00, 0x00, 0x00, 0xF8, 0xF8, 0x00, 0x00, 0x00],
            [0x10, 0x20, 0x40, 0x80, 0x80, 0x40, 0x20, 0x10],
            [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80],
            #             [0xF8, 0x80, 0x80, 0xF0, 0x08, 0x08, 0x08, 0xF0]
        ], 400)  # Swing ON
    ]
    NATURAL_WIND = [
        [0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00],
        [0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00],
        [0x00, 0x80, 0xC0, 0xE0, 0xE0, 0xC0, 0x80, 0x00],
        [0x00, 0x80, 0xD0, 0xF0, 0xF0, 0xD0, 0x80, 0x00],
        [0x00, 0x88, 0xD8, 0xF8, 0xF8, 0xD8, 0x88, 0x00],
        [0x00, 0x08, 0x58, 0x78, 0x78, 0x58, 0x08, 0x00],
        [0x00, 0x08, 0x18, 0x38, 0x38, 0x18, 0x08, 0x00],
        [0x00, 0x08, 0x18, 0x18, 0x18, 0x18, 0x08, 0x00],
        [0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
        #         [0xF8, 0x80, 0x80, 0xF0, 0x08, 0x08, 0x08, 0xF0]
    ]  # Natural Wind

    POWER_OFF = [
        [0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8],
        [0x00, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00],
        [0x00, 0x00, 0xF8, 0x00, 0x00, 0xF8, 0x00, 0x00],
        [0x00, 0x00, 0x00, 0xF8, 0xF8, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0x00, 0x70, 0x70, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00],
        [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
    ]  # Turn OFF

    def __init__(self, brightness=8):
        #         from machine import I2C, Pin

        #         self.i2c = I2C(1, freq=100000)
        from machine import SoftI2C, Pin
        self.i2c = SoftI2C(scl=Pin(22), sda=Pin(21), freq=100000)

        scanned = self.i2c.scan()
        print([hex(i) for i in scanned])
        if scanned:
            self.i2c.writeto(HT1635B_I2C_ADDRESS, bytearray([HT1635B_CMD_COM, 0]))
            self.i2c.writeto(HT1635B_I2C_ADDRESS, bytearray([HT1635B_CMD_BLINK, 0]))
            self.i2c.writeto(HT1635B_I2C_ADDRESS, bytearray([HT1635B_CMD_OSC, 4]))
            self.i2c.writeto(HT1635B_I2C_ADDRESS, bytearray([HT1635B_CMD_SYSTEM_MODE, 3]))
            self.i2c.writeto(HT1635B_I2C_ADDRESS, bytearray([HT1635B_CMD_BRIGHTNESS, brightness]))

    def clear(self):
        self.i2c.writeto(HT1635B_I2C_ADDRESS, bytearray([HT1632B_CMD_RAM_W, 0]) +
                         bytearray([0] * 44))

    async def send_command(self, command, value=None):
        if value is not None:
            cmd = command[value]
        else:
            cmd = command

        if isinstance(cmd, tuple):
            cmd, sleep = cmd
        else:
            sleep = 200

        if isinstance(cmd[0], int):
            i = bytearray(cmd)
            self.i2c.writeto(HT1635B_I2C_ADDRESS, bytearray([HT1632B_CMD_RAM_W, 0])
                             + i +
                             bytearray([0] * (44 - len(i))))
        else:
            for i in cmd:
                if isinstance(i, tuple):
                    i, sleep = i

                i = bytearray(i)
                self.i2c.writeto(HT1635B_I2C_ADDRESS, bytearray([HT1632B_CMD_RAM_W, 0])
                                 + i +
                                 bytearray([0] * (44 - len(i))))

                await uasyncio.sleep_ms(sleep)

        if command != self.NATURAL_WIND:
            await uasyncio.sleep_ms(500)
        elif command == self.TIMERS:
            await uasyncio.sleep_ms(1000)
        else:
            await uasyncio.sleep_ms(200)
